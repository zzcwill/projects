#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
var path = require('path');
var chalk = require('chalk');
var open = require('open');
var os = require('os');

var app = require('../app');
// var debug = require('debug')('dev');

var config = require('config-lite')(path.join(__dirname,'../'));

app.set('port', config.port);

var server = http.createServer(app);


server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(config.port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(config.port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var port = addr.port;
  
  // debug('Listening on ' + bind);
  // if(process.env.NODE_ENV === 'dev') {
  //   open('http://127.0.0.1:' + bind, {app: ['google chrome', '--incognito']})
  // }
  console.info(chalk.green('app run on here'));
  console.info(chalk.green(`http://${getIPAdress()}:${port}`));
}

function getIPAdress() {
  var interfaces = os.networkInterfaces();
  for (var devName in interfaces) {
      var iface = interfaces[devName];
      for (var i = 0; i < iface.length; i++) {
          var alias = iface[i];
          if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
              return alias.address;
          }
      }
  }
}
