#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
var path = require('path');
var chalk = require('chalk');
var os = require('os');

var app = require('../app/app');

var config = require('config-lite')(path.join(__dirname,'../'));

app.set('port', config.port);

var server = http.createServer(app);

//socket.io-satrt
//在线用户
var onlineUser = {
  // uid: {
  //   uid: 1,
  //   username: 'zzc'
  // }
};
var onlineCount = 0;

var io = require('socket.io')(server);

io.on('connection', function(socket){
    // 接受用户信息
    socket.on("message", function(data) {
      // data = {
      //   uid: 1,
      //   order: 1
      // }
      if(data.order === 1) {
        var newData = {
          ...data,
          onlineCount: onlineCount,
          type: 'message',
          from: 'server'
        }
        console.info(newData)
        io.to(newData.socket).emit("message", newData);        
      }
    });

    // 监听新用户加入
    socket.on('login', function (data) {
        socket.name = data.uid;

        //检查用户在线列表
        if(!onlineUser.hasOwnProperty(data.uid)){
            onlineUser[data.uid] = data;
            onlineUser[data.uid].socket = socket.id;
            //在线人数+1
            onlineCount++;

          //广播消息
          let toUserData = {
            onlineUser: onlineUser,
            onlineCount: onlineCount
          }
          // 给客户端发信息
          io.emit('login', toUserData);
          console.info(data.username + '登录')
        } 
        
        if(onlineUser.hasOwnProperty(data.uid)){
          //广播消息
          let toUserData = {
            onlineUser: onlineUser,
            onlineCount: onlineCount
          }
          // 给客户端发信息
          io.emit('login', toUserData);
          console.info(data.username + '已经登录')
        }         
    })

    //监听用户退出
    socket.on('disconnect',function () {
        //将退出用户在在线列表删除
        if(onlineUser.hasOwnProperty(socket.name)){
            var userInfo = onlineUser[socket.name];
            //删除
            delete onlineUser[socket.name];
            //在线人数-1
            onlineCount--;
            //广播消息
            let toUserData = {
              onlineUser: onlineUser,
              onlineCount: onlineCount
            }
            io.emit('logout', toUserData);
            console.info(userInfo.username + '退出')
        }
    })
});
//socket.io-end


server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(config.port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(config.port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var port = addr.port;
  
  console.info(chalk.green('app run on here'));
  console.info(chalk.green(`http://${getIPAdress()}:${port}`));
}

function getIPAdress() {
  var interfaces = os.networkInterfaces();
  for (var devName in interfaces) {
      var iface = interfaces[devName];
      for (var i = 0; i < iface.length; i++) {
          var alias = iface[i];
          if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
              return alias.address;
          }
      }
  }
}
